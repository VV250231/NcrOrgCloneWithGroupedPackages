@isTest
public with sharing class CPQ_InfiniCeptCalloutsOpenTest {
    
    static Account act;
    static Account site;
    static Contact con;
    static List<Account> sites = new List<Account>();

    @testSetup static void setupTestData() {
        System.runAs(CPQ_TestDataFactory.getSoupUser()) {
            //create account
            act = CPQ_TestDataFactory.createAccount('1', null);
            insert act;

            //creat contact
            con = CPQ_TestDataFactory.createContact(act.Id, '1', null);
            insert con;

            //create sites
            
            sites.add(CPQ_TestDataFactory.createSite(act, '1', null));
            sites.add(CPQ_TestDataFactory.createSite(act, '2', null));
            insert sites;

        }

        List<Product2> products = CPQ_TestDataFactory.createProducts(10);
            insert products;

            List<PricebookEntry> pbEntries = CPQ_TestDataFactory.createPriceBookEntries(Test.getStandardPricebookId(), products);
            insert pbEntries;

            Map<Id,PricebookEntry> productIdToPBEntery = new Map<Id,PricebookEntry>();
            for (PricebookEntry pbEntry : pbEntries) {
                productIdToPBEntery.put(pbEntry.Product2Id, pbEntry);
            }

            // Create Multisite Quote
            SBQQ__Quote__c quote = CPQ_TestDataFactory.createMultiSiteQuote(act,sites[0],con);
            insert quote;

            NCR_Payments_Site__c pyamentSite = CPQ_TestDataFactory.createNcrPaymentSite(quote,sites[1]);
            insert pyamentSite;

            for (Product2 product : products) {
                CPQ_TestDataFactory.createQuoteLineItem(quote, product, productIdToPBEntery.get(product.Id));
            }

            // Create Single site quote
            SBQQ__Quote__c singleSiteQuote = CPQ_TestDataFactory.createSingleSiteQuote(act,sites[0],con);
            insert singleSiteQuote;
            for (Product2 product : products) {
                CPQ_TestDataFactory.createQuoteLineItem(singleSiteQuote, product, productIdToPBEntery.get(product.Id));
            }

            List<JP_EndPoint__c> endpoints = new List<JP_EndPoint__c>();
            endpoints.add(new JP_EndPoint__c(name = 'JPTemplate', EndPoint_URL__c = 'https://ncrstag-stag.apigee.net/payos/api/v1.0/application/template'));
            endpoints.add(new JP_EndPoint__c(name = 'SubmitApplication', EndPoint_URL__c = 'https://ncrstag-stag.apigee.net/payos/api/v1.0/application?partial=true&'));
            insert endpoints;
    }
    
    @isTest
    static void testMultiSiteUnderWriting() {

        act = [SELECT Id, Name FROM Account WHERE ParentId = null LIMIT 1];
        Con = [SELECT Id, Name FROM Contact WHERE AccountId =: act.Id LIMIT 1];
        site = [SELECT Id, Name FROM Account WHERE ParentId != null LIMIT 1];
        SBQQ__Quote__c msQte = [SELECT Id, Name FROM SBQQ__Quote__c WHERE qtc_Multi_Site__c = true LIMIT 1];
        SBQQ__Quote__c ssQte = [SELECT Id, Name FROM SBQQ__Quote__c WHERE qtc_Multi_Site__c = false LIMIT 1];
        System.debug('*** ssQte : '+ssQte);
        System.assert(ssQte.Id!=null);
        
        MultiStaticResourceCalloutMock multimock = new MultiStaticResourceCalloutMock();

        multimock.setStaticResource('callout:JetPay/oauth/client_credential/accesstoken?grant_type=client_credentials', 
                'CPQ_jsonAccessToken');
        multimock.setStaticResource('https://ncrstag-stag.apigee.net/payos/api/v1.0/application/template', 
                'CPQ_jsonTemplate');
        multimock.setStaticResource('https://ncrstag-stag.apigee.net/payos/api/v1.0/application?partial=true&', 
                'CPQ_jsonSubmitApplication');
        multimock.setStatusCode(200);
        multimock.setHeader('Content-Type', 'application/json');        
        // Set the mock callout mode
        Test.setMock(HttpCalloutMock.class, multimock);
        Test.startTest();
        CPQ_InfiniCeptCalloutsOpen.submitAppRequest(msQte.Id);
        List<NCR_Payments_Site__c> paymentSites = [SELECT Account_Sites__c, InfiniceptApplicationId__c, 
                NCR_Payments_Application_Status__c 
                FROM NCR_Payments_Site__c 
                WHERE Account_Sites__c =: site.Id];
        System.debug('***'+paymentSites);
        System.assert(paymentSites!=null);
        
        CPQ_InfiniCeptCalloutsOpen.submitAppRequest(ssQte.Id);
        Test.stopTest();   
    }

    @isTest
    static void testSingleSiteUnderWriting() {

        act = [SELECT Id, Name FROM Account WHERE ParentId = null LIMIT 1];
        Con = [SELECT Id, Name FROM Contact WHERE AccountId =: act.Id LIMIT 1];
        site = [SELECT Id, Name FROM Account WHERE ParentId != null LIMIT 1];
        SBQQ__Quote__c ssQte = [SELECT Id, Name FROM SBQQ__Quote__c WHERE qtc_Multi_Site__c = false LIMIT 1];
        System.debug('*** ssQte : '+ssQte);
        System.assert(ssQte!=null);
        MultiStaticResourceCalloutMock multimock = new MultiStaticResourceCalloutMock();

        multimock.setStaticResource('callout:JetPay/oauth/client_credential/accesstoken?grant_type=client_credentials', 
                'CPQ_jsonAccessToken');
        multimock.setStaticResource('https://ncrstag-stag.apigee.net/payos/api/v1.0/application/template', 
                'CPQ_jsonTemplate');
        multimock.setStaticResource('https://ncrstag-stag.apigee.net/payos/api/v1.0/application?partial=true&', 
                'CPQ_jsonSubmitApplication');
        multimock.setStatusCode(200);
        multimock.setHeader('Content-Type', 'application/json');        
        // Set the mock callout mode
        Test.setMock(HttpCalloutMock.class, multimock);
        Test.startTest();
        CPQ_InfiniCeptCalloutsOpen.submitAppRequest(ssQte.Id);
        Test.stopTest();   
    }

    @isTest
    static void testJSONGenerationError() {

        act = [SELECT Id, Name FROM Account WHERE ParentId = null LIMIT 1];
        Con = [SELECT Id, Name FROM Contact WHERE AccountId =: act.Id LIMIT 1];
        site = [SELECT Id, Name FROM Account WHERE ParentId != null LIMIT 1];
        SBQQ__Quote__c ssQte = [SELECT Id, Name FROM SBQQ__Quote__c WHERE qtc_Multi_Site__c = false LIMIT 1];
        ssQte.Payments_Application_Signee__c = null; // It will throw error while generation JSON
        system.assertEquals(ssQte.Payments_Application_Signee__c, null);
        update ssQte;
        MultiStaticResourceCalloutMock multimock = new MultiStaticResourceCalloutMock();

        multimock.setStaticResource('callout:JetPay/oauth/client_credential/accesstoken?grant_type=client_credentials', 
                'CPQ_jsonAccessToken');
        multimock.setStaticResource('https://ncrstag-stag.apigee.net/payos/api/v1.0/application/template', 
                'CPQ_jsonTemplate');
        multimock.setStaticResource('https://ncrstag-stag.apigee.net/payos/api/v1.0/application?partial=true&', 
                'CPQ_jsonSubmitApplication');
        multimock.setStatusCode(200);
        multimock.setHeader('Content-Type', 'application/json');        
        // Set the mock callout mode
        Test.setMock(HttpCalloutMock.class, multimock);
        Test.startTest();
        CPQ_InfiniCeptCalloutsOpen.submitAppRequest(ssQte.Id); 
        Test.stopTest();   
    }
    
}