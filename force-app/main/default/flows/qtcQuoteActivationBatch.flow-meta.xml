<?xml version="1.0" encoding="UTF-8"?>
<Flow xmlns="http://soap.sforce.com/2006/04/metadata">
    <actionCalls>
        <description>Apex Invocable action to invoke the Batch</description>
        <name>Order_Activation_Batch</name>
        <label>Order Activation Batch</label>
        <locationX>385</locationX>
        <locationY>505</locationY>
        <actionName>qtcOrderActivationBatchAction</actionName>
        <actionType>apex</actionType>
        <connector>
            <targetReference>isSuccess</targetReference>
        </connector>
        <faultConnector>
            <targetReference>ERROR</targetReference>
        </faultConnector>
        <flowTransactionModel>Automatic</flowTransactionModel>
        <inputParameters>
            <name>batchSize</name>
            <value>
                <numberValue>1.0</numberValue>
            </value>
        </inputParameters>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </actionCalls>
    <apiVersion>53.0</apiVersion>
    <decisions>
        <name>isSuccess</name>
        <label>isSuccess</label>
        <locationX>182</locationX>
        <locationY>507</locationY>
        <defaultConnector>
            <targetReference>ERROR</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Error</defaultConnectorLabel>
        <rules>
            <name>Success</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>Order_Activation_Batch.status</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>SUCCESS</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>getAsyncApexJobs</targetReference>
            </connector>
            <label>Success</label>
        </rules>
    </decisions>
    <description>2022 FEB 03 - Updated Batch size
Screen flow to invoke Quote Activation Batch</description>
    <formulas>
        <description>Returns true if status is in Progress: Holding, Queued, Preparing, Processing</description>
        <name>isInProgressStatus</name>
        <dataType>Boolean</dataType>
        <expression>IsPickVal({!getAsyncApexJobs.Status}, &quot;Holding&quot;) ||
IsPickVal({!getAsyncApexJobs.Status}, &quot;Queued&quot;) ||
IsPickVal({!getAsyncApexJobs.Status}, &quot;Processing&quot;) ||
IsPickVal({!getAsyncApexJobs.Status}, &quot;Preparing&quot;)</expression>
    </formulas>
    <interviewLabel>Quote Activation Batch {!$Flow.CurrentDateTime}</interviewLabel>
    <label>Quote Activation Batch</label>
    <processMetadataValues>
        <name>BuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>CanvasMode</name>
        <value>
            <stringValue>FREE_FORM_CANVAS</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>OriginBuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processType>Flow</processType>
    <recordLookups>
        <description>Fetches the Id of the Apex Class</description>
        <name>getApexBatchClass</name>
        <label>getApexBatchClass</label>
        <locationX>198</locationX>
        <locationY>203</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>getAsyncApexJobs</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Name</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>qtcOrderActivationBatch</stringValue>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>ApexClass</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <description>Fetches AsyncApexJob records</description>
        <name>getAsyncApexJobs</name>
        <label>getAsyncApexJobs</label>
        <locationX>198</locationX>
        <locationY>336</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Start_Screen</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>ApexClassId</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>getApexBatchClass.Id</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>AsyncApexJob</object>
        <sortField>CreatedDate</sortField>
        <sortOrder>Desc</sortOrder>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <screens>
        <name>ERROR</name>
        <label>ERROR</label>
        <locationX>282</locationX>
        <locationY>715</locationY>
        <allowBack>true</allowBack>
        <allowFinish>true</allowFinish>
        <allowPause>true</allowPause>
        <connector>
            <targetReference>Order_Activation_Batch</targetReference>
        </connector>
        <fields>
            <name>errorMessageScreen</name>
            <fieldText>&lt;p&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;An error has occurred: &lt;/span&gt;&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <fields>
            <name>tryBatchAgainButton</name>
            <extensionName>c:flowButton</extensionName>
            <fieldType>ComponentInstance</fieldType>
            <inputParameters>
                <name>buttonClass</name>
                <value>
                    <stringValue>slds-align_absolute-center</stringValue>
                </value>
            </inputParameters>
            <inputParameters>
                <name>buttonLabel</name>
                <value>
                    <stringValue>Try Running Order Activation Batch Again</stringValue>
                </value>
            </inputParameters>
            <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
            <isRequired>true</isRequired>
            <storeOutputAutomatically>true</storeOutputAutomatically>
        </fields>
        <showFooter>false</showFooter>
        <showHeader>false</showHeader>
    </screens>
    <screens>
        <name>Start_Screen</name>
        <label>Start Screen</label>
        <locationX>385</locationX>
        <locationY>336</locationY>
        <allowBack>true</allowBack>
        <allowFinish>true</allowFinish>
        <allowPause>true</allowPause>
        <connector>
            <targetReference>Order_Activation_Batch</targetReference>
        </connector>
        <fields>
            <name>Status</name>
            <fieldText>&lt;p&gt;&lt;b style=&quot;background-color: rgb(255, 255, 255); color: rgb(62, 62, 60);&quot;&gt;Status&lt;/b&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255); color: rgb(62, 62, 60);&quot;&gt;: {!getAsyncApexJobs.Status}&lt;/span&gt;&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
            <visibilityRule>
                <conditionLogic>and</conditionLogic>
                <conditions>
                    <leftValueReference>getAsyncApexJobs.Id</leftValueReference>
                    <operator>IsNull</operator>
                    <rightValue>
                        <booleanValue>false</booleanValue>
                    </rightValue>
                </conditions>
            </visibilityRule>
        </fields>
        <fields>
            <name>textLastRanOn</name>
            <fieldText>&lt;p&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255); color: rgb(62, 62, 60);&quot;&gt;Batch was last ran on {!getAsyncApexJobs.CreatedDate}&lt;/span&gt;&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
            <visibilityRule>
                <conditionLogic>and</conditionLogic>
                <conditions>
                    <leftValueReference>isInProgressStatus</leftValueReference>
                    <operator>EqualTo</operator>
                    <rightValue>
                        <booleanValue>false</booleanValue>
                    </rightValue>
                </conditions>
                <conditions>
                    <leftValueReference>getAsyncApexJobs.Id</leftValueReference>
                    <operator>IsNull</operator>
                    <rightValue>
                        <booleanValue>false</booleanValue>
                    </rightValue>
                </conditions>
            </visibilityRule>
        </fields>
        <fields>
            <name>startBatchButton</name>
            <extensionName>c:flowButton</extensionName>
            <fieldType>ComponentInstance</fieldType>
            <inputParameters>
                <name>buttonClass</name>
                <value>
                    <stringValue>slds-align_absolute-center</stringValue>
                </value>
            </inputParameters>
            <inputParameters>
                <name>buttonLabel</name>
                <value>
                    <stringValue>Start Order Activation Batch</stringValue>
                </value>
            </inputParameters>
            <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
            <isRequired>true</isRequired>
            <storeOutputAutomatically>true</storeOutputAutomatically>
            <visibilityRule>
                <conditionLogic>or</conditionLogic>
                <conditions>
                    <leftValueReference>getAsyncApexJobs.Status</leftValueReference>
                    <operator>EqualTo</operator>
                    <rightValue>
                        <stringValue>Completed</stringValue>
                    </rightValue>
                </conditions>
                <conditions>
                    <leftValueReference>getAsyncApexJobs.Status</leftValueReference>
                    <operator>EqualTo</operator>
                    <rightValue>
                        <stringValue>Failed</stringValue>
                    </rightValue>
                </conditions>
                <conditions>
                    <leftValueReference>getAsyncApexJobs.Status</leftValueReference>
                    <operator>EqualTo</operator>
                    <rightValue>
                        <stringValue>Aborted</stringValue>
                    </rightValue>
                </conditions>
                <conditions>
                    <leftValueReference>getAsyncApexJobs.Id</leftValueReference>
                    <operator>IsNull</operator>
                    <rightValue>
                        <booleanValue>true</booleanValue>
                    </rightValue>
                </conditions>
            </visibilityRule>
        </fields>
        <showFooter>false</showFooter>
        <showHeader>false</showHeader>
    </screens>
    <start>
        <locationX>72</locationX>
        <locationY>51</locationY>
        <connector>
            <targetReference>getApexBatchClass</targetReference>
        </connector>
    </start>
    <status>Active</status>
</Flow>
